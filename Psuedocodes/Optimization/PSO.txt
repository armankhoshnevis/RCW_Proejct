Function PSO(problem, params, run_number)
    This function performs Particle Swarm Optimization (PSO) to find an optimal solution for a given problem.
    
    Inputs:
        - problem: Structure containing problem-specific data
            - numVariables: Number of model parameters to be optimized
            - variableMin: Array specifying the lower bounds for each model parameter
            - variableMax: Array specifying the upper bounds for each model parameter
            - expData: Experimental data used for evaluating the cost of each particle
            - weight: Weight applied to each component of the cost function
        
        - params: PSO parameters
            - maxIterations: Integer specifying the maximum number of iterations for the PSO loop.
            - swarmSize: Number of particles in the swarm
            - inertiaVector: Array specifying the inertia weight values for each iteration
            - personalAccCoeff: Coefficient for personal acceleration
            - socialAccCoeff: Coefficient for social acceleration
            - showIterationInfo: Boolean flag for toggling the display of iteration information
        
        - run_number: identifier for the current PSO run
    
    Outputs:
        - out: Structure contains the final results and details of the PSO run:
            - population: Array of particle structures representing the final swarm state
                - position: Array representing the final position (solution vector) of each particle
                - velocity: Array representing the final velocity of each particle
                - cost: Cost of the final position
                - best.position: Position of the personal best solution for each particle
                - best.cost: Cost of the personal best solution for each particle

            - bestSolution: Structure representing the global best solution found by the swarm
                - position: Position (solution vector) corresponding to the lowest cost observed in the swarm.
                - cost: Cost of the best solution.
            
            - bestCosts: Array containing the global best cost at each iteration, allowing for tracking the optimization process
            
            - outputData: Matrix for logging information
                - Iteration: Iteration number
                - LSE: Logarithmic squared error between experimental data and model predictions
                - MSE: Mean squared error between experimental data and model predictions
                - Global Best Position: The position of the global best

    Process:
        1. Define the optimization problem:
            - Set number of decision variables, variable bounds, and decision variable matrix size.

        2. Initialize PSO parameters:
            - Define maximum iterations, swarm size, inertia coefficient, personal/social acceleration coefficients, etc.
            - Set velocity limits based on variable bounds.

        3. Initialize swarm:
            - Create an empty template for particles with properties: position, velocity, cost, and personal best.
            - Create an array of particles for the swarm and initialize global best with a high cost (infinity).
            - For each particle:
                a. Randomly assign an initial position within variable bounds.
                b. Set initial velocity to zero.
                c. Evaluate the cost of the particle's position using the Cost_Function.
                d. Set the particle's personal best to its initial position and cost.
                e. Update global best if the particle's personal best cost is lower than the global best cost.

        4. Main optimization loop:
            - For each iteration:
                a. Adjust the inertia weight based on the iteration.
                b. For each particle in the swarm:
                    i. Update velocity based on inertia, personal best, and global best.
                    ii. Limit velocity within bounds.
                    iii. Update position based on velocity and enforce variable bounds.
                    iv. Evaluate the cost of the new position.
                    v. If the new cost is better than the particle's personal best:
                        - Update personal best to the new position and cost.
                        - If the personal best cost is better than global best cost, update global best.
                c. Record the global best cost for the current iteration.
                
                d. Optionally, log the iterationâ€™s results (cost, LSE, MSE, and global best position) if logging is enabled.

        5. Return output:
            - Store the final particle positions, the best solution (global best), the best cost per iteration, and the logged data for output.

    Output:
        - out: structure containing population, best solution, best costs, and output data matrix.
End Function
