{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Documentation","text":""},{"location":"#about-the-project","title":"About the Project","text":"<p>This study leverages fractional-order viscoelastic constitutive modeling for polyurea nanocomposites. Particle Swarm Optimization (PSO) is utilized for obtaining model parameters. This documentation provides a comprehensive guide to understanding, running, and extending the workflow for both local and HPC environments.</p>"},{"location":"#sections-overview","title":"Sections Overview","text":""},{"location":"#how-to-guides","title":"How-To Guides","text":"<p>Detailed guides for solving specific problems and using the workflow effectively. - Running the Snakefile locally or on a cluster. - Customizing metadata for specific cases.</p> <p>Go to How-To Guides</p>"},{"location":"#explanation","title":"Explanation","text":"<p>In-depth explanations of the project's components, including: - MATLAB scripts and their logic. - Metadata structure and its role in the workflow.</p> <p>Go to Explanation</p>"},{"location":"#reference","title":"Reference","text":"<p>Reference to our publication based on the results of these codes.</p> <p>Go to Reference</p>"},{"location":"explanation/","title":"Explanation","text":"<p>This section provides high-level overviews of MATLAB scripts and functions available in the GitHub repository.</p> <ul> <li><code>main_loop_hpcc_function.m</code>: Runs the PSO optimization process and saves results.</li> <li><code>PSO.m</code>: Implements the PSO optimization algorithm.</li> <li><code>Constitutive_Model.m</code>: Calculates the equivalent storage and loss moduli of the constitutive model.</li> <li><code>Cost_Function.m</code>: Calculates the multi-objective cost function for the optimization.</li> <li><code>metadata.dat</code>: Sets up the optimization params.</li> </ul>"},{"location":"explanation/Constitutive_Model/","title":"Constitutive_Model.m","text":""},{"location":"explanation/Constitutive_Model/#purpose","title":"Purpose","text":"<p>This function computes the storage modulus \\(E'\\) and loss modulus \\(E''\\) for constitutive models (FMG-FMG or FMM-FMG). It can also support similar models (i.e., FMM-FMM, FMG-FMM) with branches representing fractional-order viscoelastic behaviors.</p>"},{"location":"explanation/Constitutive_Model/#key-components","title":"Key Components","text":""},{"location":"explanation/Constitutive_Model/#1-inputs","title":"1. Inputs","text":"<ul> <li><code>problem</code>: Struct containing <code>modelData</code>, including shifted frequency data.</li> <li><code>params</code>: Parameters for the constitutive model:</li> <li>\\(E_{c1}\\), \\(E_{c2}\\): Characteristic Module for each branch.</li> <li>\\(\\tau_{c1}, \\tau_{c2}\\): Characteristic relaxation time for each branch.</li> <li>\\(\\alpha_1, \\beta_1, \\alpha_2, \\beta_2\\): Fractional-order power exponents controlling viscoelastic behavior.</li> </ul>"},{"location":"explanation/Constitutive_Model/#2-mathematical-definitions","title":"2. Mathematical Definitions","text":""},{"location":"explanation/Constitutive_Model/#storage-modulus-e","title":"Storage Modulus (\\(E'\\)):","text":"<p>\\(E^{\\prime}_{model}(x) = \\sum_{k=1}^2 E_{c_k} \\frac{\\left(x\\tau_{c_k}\\right)^{\\alpha_k} \\cos\\left(\\frac{\\pi\\alpha_k}{2}\\right) + \\left(x\\tau_{c_k}\\right)^{2\\alpha_k-\\beta_k} \\cos\\left(\\frac{\\pi\\beta_k}{2}\\right)}{1 + \\left(x\\tau_{c_k}\\right)^{\\alpha_k-\\beta_k} \\cos\\left(\\frac{\\pi\\left(\\alpha_k-\\beta_k\\right)}{2}\\right) + \\left(x\\tau_{c_k}\\right)^{2\\left(\\alpha_k-\\beta_k\\right)}} \\)</p>"},{"location":"explanation/Constitutive_Model/#loss-modulus-e","title":"Loss Modulus (\\(E''\\)):","text":"<p>\\(E^{\\prime\\prime}_{model}(x) = \\sum_{k=1}^2 E_{c_k} \\frac{\\left(x\\tau_{c_k}\\right)^{\\alpha_k} \\sin\\left(\\frac{\\pi\\alpha_k}{2}\\right) + \\left(x\\tau_{c_k}\\right)^{2\\alpha_k-\\beta_k} \\sin\\left(\\frac{\\pi\\beta_k}{2}\\right)}{1 + \\left(x\\tau_{c_k}\\right)^{\\alpha_k-\\beta_k} \\cos\\left(\\frac{\\pi\\left(\\alpha_k-\\beta_k\\right)}{2}\\right) + \\left(x\\tau_{c_k}\\right)^{2\\left(\\alpha_k-\\beta_k\\right)}} \\)</p>"},{"location":"explanation/Constitutive_Model/#3-calculations","title":"3. Calculations","text":"<ul> <li>Calculates the equivalent storage and loss moduli of the constitutive model:</li> <li>Updates <code>problem.modelData(2, :)</code> with \\(E'\\).</li> <li>Updates <code>problem.modelData(3, :)</code> with \\(E''\\).</li> </ul>"},{"location":"explanation/Constitutive_Model/#4-outputs","title":"4. Outputs","text":"<ul> <li><code>problem</code>: Struct with updated <code>modelData</code>:</li> <li><code>modelData(2, :)</code>: Storage modulus values.</li> <li><code>modelData(3, :)</code>: Loss modulus values.</li> </ul>"},{"location":"explanation/Cost_Function/","title":"Cost_Function.m","text":""},{"location":"explanation/Cost_Function/#purpose","title":"Purpose","text":"<p>This function calculates a multi-objective cost value for optimization by comparing experimental and model data. The cost quantifies the difference between the experimental storage and loss moduli (\\(E'\\) and \\(E''\\)) and their corresponding model predictions.</p>"},{"location":"explanation/Cost_Function/#key-components","title":"Key Components","text":""},{"location":"explanation/Cost_Function/#1-inputs","title":"1. Inputs","text":"<ul> <li><code>problem</code>: Struct containing:</li> <li><code>expData</code>: Experimental data for storage modulus (\\(E'\\)) and loss modulus (\\(E''\\)).</li> <li><code>weight</code>: Weights for the cost function components.</li> <li><code>params</code>: Model parameters to evaluate.</li> </ul>"},{"location":"explanation/Cost_Function/#2-multi-objective-cost-function","title":"2. Multi-Objective Cost Function","text":"<p>\\(\\min_{\\mathbf{q}} \\left(w_1 g_1(\\mathbf{q}) + w_2 g_2(\\mathbf{q})\\right)\\), where</p> <ul> <li>\\(w_1 = w_2 = \\frac{1}{2}\\)</li> <li>\\(g_1(\\mathbf{q}) = \\sum_{i=1}^{N_d} \\left(\\log(\\frac{E_{\\text{exp}}^{'}}{E_{\\text{model}}^{'}})\\right)^2, \\) \\(g_2(\\mathbf{q}) = \\sum_{i=1}^{N_d} \\left(\\log(\\frac{E_{\\text{exp}}^{''}}{E_{\\text{model}}^{''}})\\right)^2.\\)</li> <li>\\(\\mathbf{q}\\) is the vector of model parameters.</li> </ul>"},{"location":"explanation/Cost_Function/#3-output","title":"3. Output","text":"<ul> <li><code>cost</code>: Multi-objective cost value used in the optimization process.</li> </ul>"},{"location":"explanation/PSO/","title":"PSO.m","text":""},{"location":"explanation/PSO/#purpose","title":"Purpose","text":"<p>The <code>PSO</code> function implements the Particle Swarm Optimization (PSO) algorithm to obtain the optimized model parameters. It models a population of particles moving through the search space to find the optimal solution based on inertia, personal best, and global best positions.</p>"},{"location":"explanation/PSO/#key-components","title":"Key Components","text":""},{"location":"explanation/PSO/#1-problem-definition","title":"1. Problem Definition","text":"<ul> <li>Defines the optimization problem's dimensionality and boundaries:</li> <li><code>numVariables</code>: Number of decision variables.</li> <li><code>variableMin</code>, <code>variableMax</code>: Lower and upper bounds for variables (i.e., search space).</li> </ul>"},{"location":"explanation/PSO/#2-pso-parameters","title":"2. PSO Parameters","text":"<ul> <li>Configures algorithm-specific parameters:</li> <li><code>maxIterations</code>: Maximum number of iterations for each run.</li> <li><code>swarmSize</code>: Number of particles in the swarm (swarm population).</li> <li><code>inertiaVector</code>: Dynamic inertia weights for velocity updates.</li> <li><code>personalAccCoeff</code>, <code>socialAccCoeff</code>: Acceleration coefficients for personal and social influence (effect of personal best and global best cost values).</li> </ul>"},{"location":"explanation/PSO/#3-initialization","title":"3. Initialization","text":"<ul> <li>Initializes the swarm with random positions (within the search space) and zero velocities.</li> <li>Evaluates the cost function for each particle:</li> <li>Updates personal best (<code>particles(i).best</code>) and global best (<code>globalBest</code>).</li> </ul>"},{"location":"explanation/PSO/#4-main-pso-loop","title":"4. Main PSO Loop","text":"<ul> <li>For each iteration:</li> <li>Updates particle velocities and positions using PSO equations.</li> <li>Applies velocity and position bounds to keep particles within the search space.</li> <li>Updates personal and global bests based on new cost evaluations.</li> <li>Stores the best cost for each iteration in <code>bestCosts</code>.</li> </ul>"},{"location":"explanation/PSO/#5-output","title":"5. Output","text":"<ul> <li>Returns:</li> <li><code>out.population</code>: Final swarm state.</li> <li><code>out.bestSolution</code>: Best solution and its cost.</li> <li><code>out.bestCosts</code>: Cost evolution over iterations.</li> <li><code>out.outputData</code>: Iteration-wise data including Least Squares Error (LSE), Mean Squared Error (MSE), and best position</li> </ul>"},{"location":"explanation/main_loop_hpcc_function/","title":"main_loop_hpcc_function.m","text":""},{"location":"explanation/main_loop_hpcc_function/#purpose","title":"Purpose","text":"<p>The script performs Particle Swarm Optimization (PSO) for a given model (FMG-FMG or FMM-FMG) and dataset (20, 30 or 40 HSWF with 0.0, 0.5, 1.0, or 1.5 %wt. xGnP). It: 1. Reads parameters and data from a <code>.dat</code> metadata file and Excel sheet. 2. Defines the optimization problem. 3. Configures and executes PSO for multiple runs as PSO is inherently stochastic. 4. Saves optimization results and optionally generates a convergence plot.</p>"},{"location":"explanation/main_loop_hpcc_function/#key-components","title":"Key Components","text":""},{"location":"explanation/main_loop_hpcc_function/#1-input-handling","title":"1. Input Handling","text":"<ul> <li>Reads a <code>.dat</code> file (specified by <code>metadata</code>) to extract:</li> <li>Sheet name (<code>sheetName</code>) and data range (<code>validRange</code>) for experimental data.</li> <li>Model name (<code>modelName</code>).</li> <li>Variable bounds (<code>lower_bounds</code>, <code>upper_bounds</code>).</li> <li>PSO setup parameters (<code>pso_setup</code>).</li> <li>Loads experimental data from the specified Excel sheet.</li> </ul>"},{"location":"explanation/main_loop_hpcc_function/#2-problem-definition","title":"2. Problem Definition","text":"<ul> <li>Defines the optimization model and experimental data:</li> <li><code>problem.model</code>: Name of the model.</li> <li><code>problem.variableMin</code>, <code>problem.variableMax</code>: Lower and upper limits for model parameters (i.e., a search space for the optimized model parameters).</li> <li><code>problem.expData</code>, <code>problem.modelData</code>: Experimental data and model prediction.</li> </ul>"},{"location":"explanation/main_loop_hpcc_function/#3-pso-parameters","title":"3. PSO Parameters","text":"<ul> <li>Configures PSO with:</li> <li>Maximum iterations for each run and swarm size (<code>params.maxIterations</code>, <code>params.swarmSize</code>).</li> <li>Dynamic inertia coefficient (<code>params.inertiaVector</code>).</li> <li>Acceleration coefficients (<code>params.personalAccCoeff</code>, <code>params.socialAccCoeff</code>).</li> </ul>"},{"location":"explanation/main_loop_hpcc_function/#4-optimization-loop","title":"4. Optimization Loop","text":"<ul> <li>Runs PSO multiple times (<code>numRuns</code>) and records:</li> <li>Best solutions and costs.</li> <li>Least-Squares Error (LSE) for model fitting.</li> </ul>"},{"location":"explanation/main_loop_hpcc_function/#5-output-handling","title":"5. Output Handling","text":"<ul> <li>Saves optimization results to a structured directory (<code>savePath</code>).</li> <li>(Optional) Generates a convergence plot (commented out).</li> </ul>"},{"location":"explanation/metadata/","title":"Metadata Explanation ``:","text":""},{"location":"explanation/metadata/#purpose","title":"Purpose","text":"<p>This metadata file specifies the input parameters for the Particle Swarm Optimization (PSO) workflow. It defines: 1. Experimental data range. 2. The constitutive model used. 3. Variable bounds for optimization. 4. PSO settings. 5. Output file name for storing results.</p> <p>The name of each metadata corresponds a certain nanocomposite system with specific HS and GnP value. The metadata files are located at <code>/src/PSOSetup</code>.</p>"},{"location":"explanation/metadata/#breakdown-of-the-metadata","title":"Breakdown of the Metadata","text":""},{"location":"explanation/metadata/#material-identifier","title":"Material Identifier","text":"<ul> <li><code>20HS</code>: The identifier for the polyurea nanocomposite material under analysis. This is used to select the relevant data range from the experimental dataset.</li> </ul>"},{"location":"explanation/metadata/#experimental-data-range","title":"Experimental Data Range","text":"<ul> <li><code>B51:D145</code>: The range of cells in the Excel file containing experimental data:</li> <li>Column <code>B</code>: Frequencies (\\(\\omega\\)).</li> <li>Column <code>C</code>: Storage modulus (\\(E'\\)).</li> <li>Column <code>D</code>: Loss modulus (\\(E''\\)).</li> </ul>"},{"location":"explanation/metadata/#constitutive-model","title":"Constitutive Model","text":"<ul> <li><code>FMG_FMG</code>: The constitutive model to be used in the optimization. </li> </ul>"},{"location":"explanation/metadata/#variable-bounds","title":"Variable Bounds","text":"<ul> <li>The next two lines specify the lower bounds and upper bounds for the optimization variables in the following order:<ul> <li>\\(E_{c1}\\), \\(\\tau_{c1}\\), \\(alpha_1\\), \\(\\beta_1\\), \\(E_{c2}\\), \\(\\alpha_2\\), and \\(\\beta_2\\).</li> </ul> </li> </ul>"},{"location":"explanation/metadata/#pso-settings","title":"PSO Settings","text":"<ul> <li>First numnber: Maximum number of iterations for each PSO run.</li> <li>Second number: Swarm size (number of particles).</li> <li>Third number: Number of independent runs to perform.</li> </ul>"},{"location":"explanation/metadata/#output-file-name","title":"Output File Name","text":"<ul> <li>The name of the <code>.mat</code> file where the optimization results will be saved.</li> </ul>"},{"location":"how-to-guides/","title":"How to Run the workflow (Snakefile)","text":"<p>This guide explains how to execute the Snakefile for your project both on a local machine and on a high-performance computing (HPC) cluster with SLURM as the job scheduler.</p> <ul> <li><code>Local Machine</code>: How to run the workflow in you local machine?</li> <li><code>Cluster</code>: How to run the workflow on a HPCC with Slurm job scheduler?</li> </ul>"},{"location":"how-to-guides/cluster/","title":"Running the Snakefile on a Cluster (with Slurm Job Scheduler)","text":""},{"location":"how-to-guides/cluster/#prerequisites","title":"Prerequisites","text":"<ul> <li>Install Snakemake in a Python environment.</li> <li>On HPCC systems, you might need to purge existing modules and load <code>Miniforge3</code> to set up and activate a conda environment:   <pre><code>module purge\nmodule load Miniforge3\n</code></pre> For instance, refer to this guide for more information.</li> </ul>"},{"location":"how-to-guides/cluster/#steps","title":"Steps","text":"<ul> <li>Clone the repository in your desired directory.</li> <li>Activate the Python environment where Snakemake is installed.</li> <li>Go to the workflow directory inside the cloned repository (<code>cd RCW_Proejct/workflow</code>).</li> <li>To check what tasks will be executed (without actually running them), use the following command: <code>snakemake --dryrun --cores &lt;n&gt; --workflow-profile slurm</code></li> <li>To submit the workflow to the SLURM job scheduler, use the following command: <code>snakemake --cores &lt;n&gt; --workflow-profile slurm</code>.<ul> <li>Note: Here, <code>--cores &lt;n&gt;</code> allows Snakemake to manage up to <code>&lt;n&gt;</code> simultaneous processes locally (e.g., generating outputs, managing job submissions).</li> <li>Note: The maximum number of SLURM jobs Snakemake will submit to the cluster simultaneously is specified in the <code>config.yaml</code> file (as referred a bit down below).</li> </ul> </li> </ul>"},{"location":"how-to-guides/cluster/#guidesnotes-on-the-workflow-logic","title":"Guides/Notes on the workflow logic","text":"<ul> <li>All MATLAB functions and scripts required for the workflow are located in the <code>/src/PSO</code> directory.<ul> <li>`main_loop_hpcc_function.m\" is the core script for PSO optimization.</li> <li>Other scripts/functions explained in the Explanation.</li> </ul> </li> <li>Metadata for each polyurea nanocomposite is located in the <code>/src/PSO/PSOSetup</code> directory.<ul> <li>Each .dat file contains parameters such as the model name, variable bounds, experimental data details, and PSO settings.</li> <li>Refer to the Explanation section in the documentation for detailed information about metadata structure and usage.</li> </ul> </li> <li>The workflow uses <code>matlab_run.sh</code> to execute MATLAB scripts.<ul> <li>This shell ensures that a MATLAB module is loaded properly: <code>module load MATLAB/2023b</code>. For example, refer to this guide for more information on loading and running MATLAB on a cluster.</li> </ul> </li> <li>Upon successful workflow execution, the optimization results (.mat files) will be saved in:<ul> <li><code>/src/PSO/OptimizationResults/FMG_FMG</code> for FMG-FMG models.</li> <li><code>/src/PSO/OptimizationResults/FMM_FMG</code> for FMM-FMG models.</li> </ul> </li> <li>To run a specific case:<ul> <li>Remove unwanted metadata files from the <code>/src/PSO/PSOSetup</code> directory.</li> <li>Keep only the metadata file for the desired case.</li> <li>Execute the workflow as described above.</li> </ul> </li> <li>Modify the <code>default-resources</code> specification in the <code>/workflow/slurm/config.yaml</code> file to match the requirements for your optimization runs.<ul> <li>For example, adjust memory, runtime, and the number of CPUs based on the complexity of the metadata.</li> </ul> </li> </ul>"},{"location":"how-to-guides/local_machine/","title":"Running the Snakefile on a Local Machine","text":""},{"location":"how-to-guides/local_machine/#prerequisites","title":"Prerequisites","text":"<ul> <li>Install Snakemake in a Python environment.</li> </ul>"},{"location":"how-to-guides/local_machine/#steps","title":"Steps","text":"<ul> <li>Clone the repository in your desired directory.</li> <li>Activate the Python environment where Snakemake is installed.</li> <li>Go to the workflow directory inside the cloned repository (<code>cd RCW_Proejct/workflow</code>).</li> <li>To check what tasks will be executed (without actually running them), use the following command: <code>snakemake -n</code></li> <li>To execute the workflow, specify the number of cores to use <code>snakemake --cores &lt;n&gt;</code>. Replace <code>&lt;n&gt;</code> with the number of cores you want to utilize.</li> </ul>"},{"location":"how-to-guides/local_machine/#guidesnotes-on-the-workflow-logic","title":"Guides/Notes on the workflow logic","text":"<ul> <li>All MATLAB functions and scripts required for the workflow are located in the <code>/src/PSO</code> directory.<ul> <li>`main_loop_hpcc_function.m\" is the core script for PSO optimization.</li> <li>Other scripts/functions explained in the Explanation.</li> </ul> </li> <li>Metadata for each polyurea nanocomposite is located in the <code>/src/PSO/PSOSetup</code> directory.<ul> <li>Each .dat file contains parameters such as the model name, variable bounds, experimental data details, and PSO settings.</li> <li>Refer to the Explanation section in the documentation for detailed information about metadata structure and usage.</li> </ul> </li> <li>The workflow uses <code>matlab_run.sh</code> to execute MATLAB scripts.</li> <li>Upon successful workflow execution, the optimization results (.mat files) will be saved in:<ul> <li><code>/src/PSO/OptimizationResults/FMG_FMG</code> for FMG-FMG models.</li> <li><code>/src/PSO/OptimizationResults/FMM_FMG</code> for FMM-FMG models.</li> </ul> </li> <li>To run a specific case:<ul> <li>Remove unwanted metadata files from the <code>/src/PSO/PSOSetup</code> directory.</li> <li>Keep only the metadata file for the desired case.</li> <li>Execute the workflow as described above.</li> </ul> </li> </ul>"},{"location":"reference/","title":"References","text":"<ol> <li> <p>Tzelepis, Demetrios A., et al. \"Experimental and modeling studies of IPDI\u2010based polyurea elastomers\u2013The role of hard segment fraction.\" Journal of Applied Polymer Science 140.10 (2023): e53592.</p> </li> <li> <p>Tzelepis, Demetrios A., et al. \"Polyurea\u2013Graphene Nanocomposites\u2014The Influence of Hard-Segment Content and Nanoparticle Loading on Mechanical Properties.\" Polymers 15.22 (2023): 4434.</p> </li> <li> <p>Khoshnevis, Arman, et al. \"Stochastic Generalized-Order Constitutive Modeling of Viscoelastic Spectra of Polyurea-Graphene Nanocomposites.\" arXiv preprint arXiv:2408.13717 (2024).</p> </li> </ol>"}]}